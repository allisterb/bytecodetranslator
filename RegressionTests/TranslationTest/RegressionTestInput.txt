// Copyright (c) 2010, Microsoft Corp.
// Bytecode Translator prelude

const null: int;
type HeapType = [int,int]int;
function IsGoodHeap(HeapType): bool;
var $Heap: HeapType where IsGoodHeap($Heap);

var $ArrayContents: [int][int]int;
var $ArrayLength: [int]int;

var $Alloc: [int] bool;
procedure {:inline 1} Alloc() returns (x: int)
modifies $Alloc;
{
  assume $Alloc[x] == false;
  $Alloc[x] := true;
}

procedure RegressionTestInput.AsyncAttribute..ctor$System.Void(this: int);



implementation RegressionTestInput.AsyncAttribute..ctor$System.Void(this: int)
{
    return;
}



var RegressionTestInput.ClassWithBoolTypes.staticB: bool;

const unique RegressionTestInput.ClassWithBoolTypes.b: bool;

procedure RegressionTestInput.ClassWithBoolTypes.M$System.Boolean(x$in: int, y$in: int) returns ($result: bool);



implementation RegressionTestInput.ClassWithBoolTypes.M$System.Boolean(x$in: int, y$in: int) returns ($result: bool)
{
  var x: int;
  var y: int;
  var local_0: bool;

    x := x$in;
    y := y$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 64} true;
    local_0 := x < y;
    assume {:sourceFile "Class1.cs"} {:sourceLine 65} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.ClassWithBoolTypes..ctor$System.Void(this: int, z$in: bool);



implementation RegressionTestInput.ClassWithBoolTypes..ctor$System.Void(this: int, z$in: bool)
{
  var z: bool;

    z := z$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 67} true;
    assume {:sourceFile "Class1.cs"} {:sourceLine 68} true;
    $Heap[this, RegressionTestInput.ClassWithBoolTypes.b] := z;
    assume {:sourceFile "Class1.cs"} {:sourceLine 16707566} true;
    if (z)
    {
        assume {:sourceFile "Class1.cs"} {:sourceLine 69} true;
        RegressionTestInput.ClassWithBoolTypes.staticB := z;
    }
    else
    {
    }

    return;
}



procedure RegressionTestInput.ClassWithBoolTypes.Main$System.Void();



implementation RegressionTestInput.ClassWithBoolTypes.Main$System.Void()
{
  var $tmp0: bool;

    assume {:sourceFile "Class1.cs"} {:sourceLine 73} true;
    call $tmp0 := RegressionTestInput.ClassWithBoolTypes.M$System.Boolean(3, 4);
    assume {:sourceFile "Class1.cs"} {:sourceLine 74} true;
    return;
}



var RegressionTestInput.Class0.StaticInt: int;

procedure RegressionTestInput.Class0.StaticMethod$System.Int32(x$in: int) returns ($result: int);



implementation RegressionTestInput.Class0.StaticMethod$System.Int32(x$in: int) returns ($result: int)
{
  var x: int;
  var local_0: int;

    x := x$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 17} true;
    local_0 := x + 1;
    assume {:sourceFile "Class1.cs"} {:sourceLine 18} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.M$System.Void(this: int, x$in: int);



implementation RegressionTestInput.Class0.M$System.Void(this: int, x$in: int)
{
  var x: int;
  var __temp_1: int;
  var $tmp1: int;
  var __temp_2: int;
  var __temp_3: int;
  var local_0: int;

    x := x$in;
    $tmp1 := x;
    assert $tmp1 != 0;
    __temp_1 := 5 / $tmp1;
    __temp_2 := 3;
    assume {:sourceFile "Class1.cs"} {:sourceLine 21} true;
    __temp_3 := __temp_2;
    x := __temp_3;
    local_0 := __temp_1 + __temp_2;
    assume {:sourceFile "Class1.cs"} {:sourceLine 22} true;
    assert x == 3 && local_0 <= 8;
    assume {:sourceFile "Class1.cs"} {:sourceLine 23} true;
    RegressionTestInput.Class0.StaticInt := local_0;
    assume {:sourceFile "Class1.cs"} {:sourceLine 24} true;
    assert local_0 == RegressionTestInput.Class0.StaticInt;
    assume {:sourceFile "Class1.cs"} {:sourceLine 25} true;
    return;
}



procedure RegressionTestInput.Class0.NonVoid$System.Int32(this: int) returns ($result: int);



implementation RegressionTestInput.Class0.NonVoid$System.Int32(this: int) returns ($result: int)
{
  var local_0: int;
  var $tmp2: int;

    assume {:sourceFile "Class1.cs"} {:sourceLine 28} true;
    call $tmp2 := RegressionTestInput.Class0.StaticMethod$System.Int32(3);
    local_0 := 3 + RegressionTestInput.Class0.StaticInt + $tmp2;
    assume {:sourceFile "Class1.cs"} {:sourceLine 29} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.OutParam$System.Int32(this: int) returns (x$out: int, $result: int);



implementation RegressionTestInput.Class0.OutParam$System.Int32(this: int) returns (x$out: int, $result: int)
{
  var local_0: int;

    assume {:sourceFile "Class1.cs"} {:sourceLine 32} true;
    x$out := 3 + RegressionTestInput.Class0.StaticInt;
    assume {:sourceFile "Class1.cs"} {:sourceLine 33} true;
    local_0 := x$out;
    assume {:sourceFile "Class1.cs"} {:sourceLine 34} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.RefParam$System.Int32(this: int, x$in: int) returns (x$out: int, $result: int);



implementation RegressionTestInput.Class0.RefParam$System.Int32(this: int, x$in: int) returns (x$out: int, $result: int)
{
  var local_0: int;

    x$out := x$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 37} true;
    x$out := x$out + 1;
    assume {:sourceFile "Class1.cs"} {:sourceLine 38} true;
    RegressionTestInput.Class0.StaticInt := x$out;
    assume {:sourceFile "Class1.cs"} {:sourceLine 39} true;
    local_0 := x$out;
    assume {:sourceFile "Class1.cs"} {:sourceLine 40} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.AssignToInParam$System.Int32(this: int, x$in: int) returns ($result: int);



implementation RegressionTestInput.Class0.AssignToInParam$System.Int32(this: int, x$in: int) returns ($result: int)
{
  var x: int;
  var local_0: int;

    x := x$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 43} true;
    x := x + 1;
    assume {:sourceFile "Class1.cs"} {:sourceLine 44} true;
    RegressionTestInput.Class0.StaticInt := x;
    assume {:sourceFile "Class1.cs"} {:sourceLine 45} true;
    local_0 := x;
    assume {:sourceFile "Class1.cs"} {:sourceLine 46} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.MethodThatRepresentsAnAynchronousMethod$System.Int32(this: int, x$in: int) returns ($result: int);



implementation RegressionTestInput.Class0.MethodThatRepresentsAnAynchronousMethod$System.Int32(this: int, x$in: int) returns ($result: int)
{
  var x: int;
  var local_0: int;

    x := x$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 50} true;
    local_0 := x;
    assume {:sourceFile "Class1.cs"} {:sourceLine 51} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0.CallAsyncMethod$System.Int32(this: int, y$in: int) returns ($result: int);



implementation RegressionTestInput.Class0.CallAsyncMethod$System.Int32(this: int, y$in: int) returns ($result: int)
{
  var y: int;
  var local_0: int;
  var $tmp3: int;

    y := y$in;
    assume {:sourceFile "Class1.cs"} {:sourceLine 54} true;
    call {:async} $tmp3 := RegressionTestInput.Class0.MethodThatRepresentsAnAynchronousMethod$System.Int32(this, y);
    local_0 := $tmp3;
    assume {:sourceFile "Class1.cs"} {:sourceLine 55} true;
    $result := local_0;
    return;
}



procedure RegressionTestInput.Class0..ctor$System.Void(this: int);



implementation RegressionTestInput.Class0..ctor$System.Void(this: int)
{
    return;
}


